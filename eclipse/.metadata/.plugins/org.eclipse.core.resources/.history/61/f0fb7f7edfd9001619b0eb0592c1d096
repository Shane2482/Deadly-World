package shane2482.deadlyworld.render;

import org.lwjgl.opengl.GL11;

import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelChest;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
import net.minecraft.client.renderer.entity.RenderEntityItem;
import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import shane2482.deadlyworld.Reference;
import shane2482.deadlyworld.utils.renderutils;
import shane2482.deadlyworld.wip.tile.TileEntityPlywoodChest;

public class PlywoodChestRenderer extends TileEntitySpecialRenderer<TileEntityPlywoodChest> {

	ResourceLocation Plywood_Chest = new ResourceLocation(
			Reference.MOD_ID + ":" + "textures/entity/chest/plywood_chest.png");
	private ModelChest model;
	private RenderEntityItem itemRenderer;
	
	public PlywoodChestRenderer() {
		this.model = new ModelChest();

	}

	@Override
	public void renderTileEntityAt(TileEntityPlywoodChest te, double x, double y, double z, float partialTick, int breakStage) {
		if (te instanceof TileEntityPlywoodChest) {
			TileEntityPlywoodChest mod_chest = (TileEntityPlywoodChest) te;

			GlStateManager.pushMatrix();
			if (breakStage >= 0)
            {
                this.bindTexture(DESTROY_STAGES[breakStage]);
                GlStateManager.matrixMode(5890);
                GlStateManager.pushMatrix();
                GlStateManager.scale(4.0F, 4.0F, 1.0F);
                GlStateManager.translate(0.0625F, 0.0625F, 0.0625F);
                GlStateManager.matrixMode(5888);
                
            }
			IBlockState state = mod_chest.getWorld().getBlockState(mod_chest.getPos());
			switch (state.getBlock().getMetaFromState(state)) {
			case 1:
				GlStateManager.rotate(0, 0, 0, 0);
				break;
			// Facing South
			case 2:
				
				GL11.glTranslatef((float) x + 1.0f, (float) y + 1.0f, (float) z + 0.0f);
				GlStateManager.rotate(180, 0, 0, 1);
							    
			    float lidangle = te.prevLidAngle + (te.lidAngle - te.prevLidAngle) * partialTick;
			    lidangle = 1.0F - lidangle;
			    lidangle = 1.0F - lidangle * lidangle * lidangle;
			    model.chestLid.rotateAngleX = -((lidangle * 3.141593F) / 2.0F);
				break;
			// Facing North
			case 3:
				
				GL11.glTranslatef((float) x + 0.0f, (float) y + 1.0f, (float) z + 1.0f);
				GlStateManager.rotate(180, -180, 0, 1);
				float lidangle1 = te.prevLidAngle + (te.lidAngle - te.prevLidAngle) * partialTick;
			    lidangle1 = 1.0F - lidangle1;
			    lidangle1 = 1.0F - lidangle1 * lidangle1 * lidangle1;
			    model.chestLid.rotateAngleX = -((lidangle1 * 3.141593F) / 2.0F);
				break;
			// Facing East
			case 4:
				
				GL11.glTranslatef((float) x + 0.0f, (float) y + 1.0f, (float) z + 0.0f);
				GlStateManager.rotate(180, 1, 0, 1);
				float lidangle2 = te.prevLidAngle + (te.lidAngle - te.prevLidAngle) * partialTick;
			    lidangle2 = 1.0F - lidangle2;
			    lidangle2 = 1.0F - lidangle2 * lidangle2 * lidangle2;
			    model.chestLid.rotateAngleX = -((lidangle2 * 3.141593F) / 2.0F);
				break;
			// Facing West
			case 5:
				
				GL11.glTranslatef((float) x + 1.0f, (float) y + 1.0f, (float) z + 1.0f);
				GlStateManager.rotate(180, -1, 0, 1);
				float lidangle3 = te.prevLidAngle + (te.lidAngle - te.prevLidAngle) * partialTick;
			    lidangle3 = 1.0F - lidangle3;
			    lidangle3 = 1.0F - lidangle3 * lidangle3 * lidangle3;
			    model.chestLid.rotateAngleX = -((lidangle3 * 3.141593F) / 2.0F);
				break;
			}
			if (breakStage >= 0)
	        {
	            bindTexture(DESTROY_STAGES[breakStage]);
	            GlStateManager.matrixMode(5890);
	            GlStateManager.pushMatrix();
	            GlStateManager.scale(4.0F, 4.0F, 1.0F);
	            GlStateManager.translate(0.0625F, 0.0625F, 0.0625F);
	            GlStateManager.matrixMode(5888);
	        } else
			
			this.bindTexture(Plywood_Chest);
			GL11.glPushMatrix();
			this.model.renderAll();
			GL11.glPopMatrix();
			GL11.glPopMatrix();
		}
	}
	
	 @SideOnly(Side.CLIENT)
	    public static void renderItemInWorld(ItemStack stack){
	        if(renderutils.isValid(stack)){
	            GlStateManager.pushMatrix();
	            GlStateManager.disableLighting();
	            GlStateManager.pushAttrib();
	            RenderHelper.enableStandardItemLighting();
	            Minecraft.getMinecraft().getRenderItem().renderItem(stack, TransformType.FIXED);
	            RenderHelper.disableStandardItemLighting();
	            GlStateManager.popAttrib();
	            GlStateManager.enableLighting();
	            GlStateManager.popMatrix();
	        }
	    }

}