package Shane2482.DeadPlanet.tileentity;

import java.awt.List;

import javax.annotation.Nullable;

import Shane2482.DeadPlanet.init.ModBlocks;
import net.minecraft.block.BlockChest;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.ContainerChest;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.InventoryLargeChest;
import net.minecraft.inventory.ItemStackHelper;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityLockableLoot;
import net.minecraft.util.EnumBlockRenderType;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.ITickable;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.text.ITextComponent;
import net.minecraft.world.ILockableContainer;
import net.minecraft.world.LockCode;
import net.minecraftforge.fml.common.asm.transformers.ModAccessTransformer;

public class TileEntityBasaltChest extends TileEntityLockableLoot implements ITickable, IInventory{
	
	private ItemStack[] inventory;
	private String customName;
	 public int numPlayersUsing;
	 public float lidAngle;
	    public float prevLidAngle;
	    private int ticksSinceSync;
		private int numUsingPlayers;
		
	
	public TileEntityBasaltChest() {
		this.inventory = new ItemStack[this.getSizeInventory()];
	}
	
	public String getCustomName() {
		return customName;
	}
	public void setCustomName(String customName) {
		this.customName = customName;
	}
	
	@Override
	public String getName() {
		return this.hasCustomName() ? this.customName : "container.Basalt_Chest";
	}
	
	@Override
	public boolean hasCustomName() {
		
		return this.customName != null && !this.customName.equals("");
	}
	
	//@Override
	//public ITextComponent getDisplayName() {
	//	return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName()) ;
	//}
	
	@Override
	public int getSizeInventory() {
		return 45;
	}
	
	@Override
	public int getInventoryStackLimit() {
		return 64;
	}
	@Override
	public ItemStack getStackInSlot(int index) {
	    if (index < 0 || index >= this.getSizeInventory())
	        return null;
	    return this.inventory[index];
	}

	@Override
	public ItemStack decrStackSize(int index, int count) {
	    if (this.getStackInSlot(index) != null) {
	        ItemStack itemstack;

	        if (this.getStackInSlot(index).stackSize <= count) {
	            itemstack = this.getStackInSlot(index);
	            this.setInventorySlotContents(index, null);
	            this.markDirty();
	            return itemstack;
	        } else {
	            itemstack = this.getStackInSlot(index).splitStack(count);

	            if (this.getStackInSlot(index).stackSize <= 0) {
	                this.setInventorySlotContents(index, null);
	            } else {
	                
	                this.setInventorySlotContents(index, this.getStackInSlot(index));
	            }

	            this.markDirty();
	            return itemstack;
	        }
	    } else {
	        return null;
	    }
	}

	@Override
	public void setInventorySlotContents(int index, ItemStack stack) {
	    if (index < 0 || index >= this.getSizeInventory())
	        return;

	    if (stack != null && stack.stackSize > this.getInventoryStackLimit())
	        stack.stackSize = this.getInventoryStackLimit();
	        
	    if (stack != null && stack.stackSize == 0)
	        stack = null;

	    this.inventory[index] = stack;
	    this.markDirty();
	}
	
	@Override
	 public boolean isItemValidForSlot(int index, ItemStack stack)
	    {
	        return true;
	    }

	
	@Nullable
	@Override
    public ItemStack removeStackFromSlot(int index)
    {
		  ItemStack stack = this.getStackInSlot(index);
		    this.setInventorySlotContents(index, null);
		    return stack;
    }
	
	@Override
	public boolean isUseableByPlayer(EntityPlayer player)
    {
        return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;
    }
	
	public void openInventory(EntityPlayer player)
    {
        if (!player.isSpectator())
        {
            if (this.numPlayersUsing < 0)
            {
                this.numPlayersUsing = 0;
            }

            ++this.numPlayersUsing;
            this.worldObj.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
            this.worldObj.notifyNeighborsOfStateChange(this.pos, this.getBlockType());
            this.worldObj.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType());
        }
    }
	
	public void closeInventory(EntityPlayer player)
    {
        if (!player.isSpectator() && this.getBlockType() instanceof BlockChest)
        {
            --this.numPlayersUsing;
            this.worldObj.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
            this.worldObj.notifyNeighborsOfStateChange(this.pos, this.getBlockType());
            this.worldObj.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType());
        }
    }
	
	@Override
	 public int getField(int id)
    {
        return 0;
    }

	@Override
    public void setField(int id, int value)
    {
    }

	@Override
    public int getFieldCount()
    {
        return 0;
    }
	
	@Override
	public void clear() {
		for(int i = 0; i < this.getSizeInventory(); i++)
			this.setInventorySlotContents(i, null);
	}
	
	
	 @Override
	 public NBTTagCompound writeToNBT(NBTTagCompound tag)
	    {
		 super.writeToNBT(tag);

		    NBTTagList list = new NBTTagList();
		    for (int i = 0; i < this.getSizeInventory(); ++i) {
		        if (this.getStackInSlot(i) != null) {
		            NBTTagCompound stackTag = new NBTTagCompound();
		            stackTag.setByte("Slot", (byte) i);
		            this.getStackInSlot(i).writeToNBT(stackTag);
		            list.appendTag(stackTag);
		        }
		    }
		    tag.setTag("Items", list);

		    if (this.hasCustomName()) {
		        tag.setString("CustomName", this.getCustomName());
		    }
		

	        return tag;
	    }

	
	 @Override
	 public void readFromNBT(NBTTagCompound tag)
	    {
		 super.readFromNBT(tag);

		    NBTTagList list = tag.getTagList("Items", 10);
		    for (int i = 0; i < list.tagCount(); ++i) {
		        NBTTagCompound stackTag = list.getCompoundTagAt(i);
		        int slot = stackTag.getByte("Slot") & 255;
		        this.setInventorySlotContents(slot, ItemStack.loadItemStackFromNBT(stackTag));
		    }

		    if (tag.hasKey("CustomName", 8)) {
		        this.setCustomName(tag.getString("CustomName"));
		    }
		}

	@Override
	public Container createContainer(InventoryPlayer playerInventory, EntityPlayer playerIn)
		{
	        this.fillWithLoot(playerIn);
	        return new ContainerChest(playerInventory, this, playerIn);
	    }
	

	@Override
	public String getGuiID() {
		return customName;
	}

	@Override
	 public void update()
	{
		
		int i = this.pos.getX();
        int j = this.pos.getY();
        int k = this.pos.getZ();
        // Resynchronize clients with the server state
        if (worldObj != null && !this.worldObj.isRemote && this.numUsingPlayers != 0 && (this.ticksSinceSync + pos.getX() + pos.getY() + pos.getZ()) % 200 == 0)
        {
           
        }

        if (worldObj != null && !worldObj.isRemote && ticksSinceSync < 0)
        {
            worldObj.addBlockEvent(pos, ModBlocks.Basalt_Chest, 3, ((numUsingPlayers << 3) & 0xF8) );
        }
       

        this.ticksSinceSync++;
        prevLidAngle = lidAngle;
        float f = 0.1F;
        if (numUsingPlayers > 0 && lidAngle == 0.0F)
        {
        	 double d1 = (double)i + 0.5D;
             double d2 = (double)k + 0.5D;
             this.worldObj.playSound((EntityPlayer)null, d1, (double)j + 0.5D, d2, SoundEvents.BLOCK_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
         }
        if (numUsingPlayers == 0 && lidAngle > 0.0F || numUsingPlayers > 0 && lidAngle < 1.0F)
        {
            float f1 = lidAngle;
            if (numUsingPlayers > 0)
            {
                lidAngle += f;
            } else
            {
                lidAngle -= f;
            }
            if (lidAngle > 1.0F)
            {
                lidAngle = 1.0F;
            }
            float f2 = 0.5F;
            if (lidAngle < f2 && f1 >= f2)
            {
            	double d3 = (double)i + 0.5D;
                double d0 = (double)k + 0.5D;
                this.worldObj.playSound((EntityPlayer)null, d3, (double)j + 0.5D, d0, SoundEvents.BLOCK_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.worldObj.rand.nextFloat() * 0.1F + 0.9F);
            }
            if (lidAngle < 0.0F)
            {
                lidAngle = 0.0F;
            }
        }
    }

	
	 
	
}
