package shane2482.deadlyworld.blocks;

import net.minecraft.block.SoundType;
import net.minecraft.block.material.Material;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyBool;
import net.minecraft.block.state.BlockStateContainer;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.util.EnumBlockRenderType;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import shane2482.deadlyworld.blocks.base.blockbase;

public class block_lamp extends blockbase {
	private static final PropertyBool isOn = PropertyBool.create("ison");

	public block_lamp(Material material, String name, String Regname, float hardness, float resistance, String tool,
			int level) {
		super(material, name, Regname, hardness, resistance, tool, level);
		setSoundType(SoundType.GLASS);
		setDefaultState(blockState.getBaseState().withProperty(isOn, Boolean.valueOf(false)));

	}
	
	@Override
	protected BlockStateContainer createBlockState() {
		return new BlockStateContainer(this, new IProperty[] {isOn});
	}
	
	@Override
	public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ,
			int meta, EntityLivingBase placer) {
		return this.getDefaultState().withProperty(isOn, Boolean.valueOf(false));
	}
	
	@Override
	public IBlockState getStateFromMeta(int meta) {
		return this.getDefaultState().withProperty(isOn, Boolean.valueOf(false));
	}
	

	/*public void onNeighborChange(IBlockState state, World world, BlockPos pos, BlockPos block) {
		if (!world.isBlockPowered(pos)) {
			world.setBlockState(pos, state.withProperty(isOn, Boolean.valueOf(true)), 2);
		} else {
			world.setBlockState(pos, state.withProperty(isOn, Boolean.valueOf(false)), 2);

		}
	}*/
	
	@Override
	public BlockRenderLayer getBlockLayer() {
		return BlockRenderLayer.CUTOUT_MIPPED;
	}
	
	@Override
	public boolean isOpaqueCube(IBlockState state) {
		return false;
	}

	@Override
	public boolean isFullCube(IBlockState state) {
		return false;
	}
}
