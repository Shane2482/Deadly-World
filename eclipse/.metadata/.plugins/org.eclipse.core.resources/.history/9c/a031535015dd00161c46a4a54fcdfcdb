package shane2482.deadlyworld.container;

import javax.annotation.Nullable;

import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import shane2482.deadlyworld.tiles.tileentity_plywood_deep_crate;

public class container_Plywood_Deep_Crate extends Container{

	private tileentity_plywood_deep_crate Te;

    public container_Plywood_Deep_Crate(InventoryPlayer playerInv, tileentity_plywood_deep_crate Te)
    {
        this.Te = Te;
        
        for (int l = 0; l < 9; ++l)
        {
            this.addSlotToContainer(new Slot(playerInv, l, 35 + l * 18, 198));
        }
       

        for (int k = 0; k < 3; ++k)
        {
            for (int i1 = 0; i1 < 9; ++i1)
            {
                this.addSlotToContainer(new Slot(playerInv, i1 + k * 9 + 9, 35 + i1 * 18, 140 + k * 18));
            }
        }

            
        for (int i = 0; i < 6; ++i)
        {
            for (int j = 0; j < 12; ++j)
            {
                this.addSlotToContainer(new Slot(Te, j + i * 3, 8 + j * 18, 18 + i * 18));
            }
        }
    }
	
    
 


	 @Nullable
    @Override
    public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
    {
        ItemStack itemstack = null;
        Slot slot = (Slot)this.inventorySlots.get(index);

        if (slot != null && slot.getHasStack())
        {
            ItemStack itemstack1 = slot.getStack();
            itemstack = itemstack1.copy();

            if (index < 6 * 12)
            {
                if (!this.mergeItemStack(itemstack1, 6 * 12, this.inventorySlots.size(), true))
                {
                    return null;
                }
            }
            else if (!this.mergeItemStack(itemstack1, 0, 6 * 12, false))
            {
                return null;
            }

            if (itemstack1.stackSize == 0)
            {
                slot.putStack((ItemStack)null);
            }
            else
            {
                slot.onSlotChanged();
            }
        }

        return itemstack;
    }
    @Override
    public void onContainerClosed(EntityPlayer playerIn)
    {
        super.onContainerClosed(playerIn);
        this.chestInv.closeInventory(playerIn);
    }

    
    
    
    @Override
	public boolean canInteractWith(EntityPlayer player) {
		return this.chestInv.isUseableByPlayer(player);
	}

}
