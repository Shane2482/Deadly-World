package shane2482.deadlyworld.tiles;

import java.awt.event.MouseWheelEvent;

import javax.annotation.Nullable;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.ContainerChest;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.ItemStackHelper;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityLockableLoot;
import shane2482.deadlyworld.container.container_Plywood_Deep_Crate;

public class tileentity_plywood_deep_crate extends TileEntityLockableLoot implements IInventory {
	
	private ItemStack[] inventory;
	private String customName;
	
	
	public tileentity_plywood_deep_crate() {
		this.inventory = new ItemStack[this.getSizeInventory()];
	}
	
	public String getCustomName(){
		return customName;
	}
	
	public void setCustomName(String customName){
		this.customName = customName;
		
	}
	
	
	@Override
	public String getName() {
		return hasCustomName() ? customName : "container:plywood_deep_chest";
	}

	@Override
	public boolean hasCustomName() {
		return customName != null && !customName.equals("");
	}

	@Override
	public int getSizeInventory() {
		return 72;
	}

	@Override
	public ItemStack getStackInSlot(int index) {
		if(index < 0 || index >= getSizeInventory()){
			return null;
		}
		return inventory[index];
		
	}

	 @Nullable
	    @Override
	    public ItemStack decrStackSize(int index, int count)
	    {
	        
	        ItemStack itemstack = ItemStackHelper.getAndSplit(this.inventory, index, count);

	        if (itemstack != null)
	        {
	            this.markDirty();
	        }

	        return itemstack;
	    }

	 @Nullable
	    @Override
	    public ItemStack removeStackFromSlot(int index)
	    {
	       
	        return ItemStackHelper.getAndRemove(this.inventory, index);
	    }


	@Override
	public void setInventorySlotContents(int index, ItemStack stack) {
		if(index < 0 || index >= getSizeInventory())
			return;
		
		if(stack != null && stack.stackSize > getInventoryStackLimit())
			stack.stackSize = getInventoryStackLimit();
		
		if(stack != null && stack.stackSize == 0)
			stack = null;
		
		inventory[index] = stack;
		markDirty();
		
	}

	@Override
	public int getInventoryStackLimit() {
		return 64;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer player) {
		return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq((double)this.pos.getX() + 0.5D, (double)this.pos.getY() + 0.5D, (double)this.pos.getZ() + 0.5D) <= 64.0D;	}

	@Override
	public void openInventory(EntityPlayer player) {
		//todo
	}

	@Override
	public void closeInventory(EntityPlayer player) {
		//todo
	}

	@Override
	public boolean isItemValidForSlot(int index, ItemStack stack) {
		return true;
	}

	@Override
	public int getField(int id) {
		return 0;
	}

	@Override
	public void setField(int id, int value) {}

	@Override
	public int getFieldCount() {
		return 0;
	}

	@Override
	public void clear() {
		 for (int i = 0; i < this.inventory.length; ++i)
	        {
	            this.inventory[i] = null;
	        }
		
	}
	
	@Override
    public void readFromNBT(NBTTagCompound nbt)
    {
        super.readFromNBT(nbt);
        this.inventory = new ItemStack[this.getSizeInventory()];

        if (nbt.hasKey("CustomName", 8))
        {
            this.customName = nbt.getString("CustomName");
        }

        if (!this.checkLootAndRead(nbt))
        {
            NBTTagList list = nbt.getTagList("Items", 10);

            for (int i = 0; i < list.tagCount(); ++i)
            {
                NBTTagCompound nbttagcompound = list.getCompoundTagAt(i);
                int j = nbttagcompound.getByte("Slot") & 255;

                if (j >= 0 && j < this.inventory.length)
                {
                    this.inventory[j] = ItemStack.loadItemStackFromNBT(nbttagcompound);
                }
            }
        }
    }

    @Override
    public NBTTagCompound writeToNBT(NBTTagCompound nbt)
    {
        super.writeToNBT(nbt);

        if (!this.checkLootAndWrite(nbt))
        {
            NBTTagList list = new NBTTagList();

            for (int i = 0; i < this.inventory.length; ++i)
            {
                if (this.inventory[i] != null)
                {
                    NBTTagCompound nbttagcompound = new NBTTagCompound();
                    nbttagcompound.setByte("Slot", (byte)i);
                    this.inventory[i].writeToNBT(nbttagcompound);
                   list.appendTag(nbttagcompound);
                }
            }

            nbt.setTag("Items", list);
        }

        if (this.hasCustomName())
        {
            nbt.setString("CustomName", this.customName);
        }

        return nbt;
    }

	@Override
	 public Container createContainer(InventoryPlayer playerInv, EntityPlayer player)
    {
        return new container_Plywood_Deep_Crate(playerInv, this, player);
    }

	@Override
	public String getGuiID() {
		return null;
	}

}
