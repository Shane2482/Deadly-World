package shane2482.deadlyworld.container;

import javax.annotation.Nullable;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.InventoryCraftResult;
import net.minecraft.inventory.InventoryCrafting;
import net.minecraft.inventory.Slot;
import net.minecraft.inventory.SlotCrafting;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.item.crafting.FurnaceRecipes;
import net.minecraft.tileentity.TileEntityFurnace;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

public class ContainerWorkstation extends Container {

	public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
	private final IInventory craftResult = new InventoryCraftResult();
	private final IInventory chestInv;
	private final World worldObj;
	private final BlockPos pos;
	private final int numRows;

	public ContainerWorkstation(InventoryPlayer playerInv, IInventory chestInv, EntityPlayer player, World world, BlockPos pos) {
		
		this.chestInv = chestInv;
		this.pos = pos;
		numRows = chestInv.getSizeInventory() / 4;
		chestInv.openInventory(player);
		int i = (numRows - 4) * 18;
		worldObj = world;

		// Crafting
		addSlotToContainer(new SlotCrafting(playerInv.player, craftMatrix, craftResult, 0, 124, 35));

		for (int l = 0; l < 3; ++l) {
			for (int j = 0; j < 3; ++j) {
				addSlotToContainer(new Slot(craftMatrix, j + l * 3, 30 + j * 18, 17 + l * 18));
			}
		}

		// Inventory
		for (int j = 0; j < numRows; ++j) {
			for (int k = 0; k < 4; ++k) {
				addSlotToContainer(new Slot(chestInv, k + j * 4, 8 + k * 18, 18 + j * 18));
			}
		}

		// PlayerInv
		for (int k = 0; k < 3; ++k) {
			for (int i1 = 0; i1 < 9; ++i1) {
				addSlotToContainer(new Slot(playerInv, i1 + k * 9 + 9, 8 + i1 * 18, 84 + k * 18));
			}
		}

		// PlayerHotbar
		for (int l = 0; l < 9; ++l) {
			addSlotToContainer(new Slot(playerInv, l, 8 + l * 18, 142));
		}

		onCraftMatrixChanged(craftMatrix);
	}

	@Override
	public void onCraftMatrixChanged(IInventory inventoryIn) {
		this.craftResult.setInventorySlotContents(0,
				CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj));
	}

	@Override
	public boolean canInteractWith(EntityPlayer playerIn) {
		return this.worldObj.getBlockState(this.pos).getBlock() != Blocks.CRAFTING_TABLE ? false
				: playerIn.getDistanceSq((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.5D,
						(double) this.pos.getZ() + 0.5D) <= 64.0D;
	}

	@Nullable
	@Override
	public ItemStack transferStackInSlot(EntityPlayer playerIn, int index) {
		ItemStack itemstack = null;
		Slot slot = (Slot) this.inventorySlots.get(index);

		if (slot != null && slot.getHasStack()) {
			ItemStack itemstack1 = slot.getStack();
			itemstack = itemstack1.copy();

			if (index == 0) {
				if (!this.mergeItemStack(itemstack1, 10, 46, true)) {
					return null;
				}

				slot.onSlotChange(itemstack1, itemstack);
			} else if (index >= 10 && index < 37) {
				if (!this.mergeItemStack(itemstack1, 37, 46, false)) {
					return null;
				}
			} else if (index >= 37 && index < 46) {
				if (!this.mergeItemStack(itemstack1, 10, 37, false)) {
					return null;
				}
			} else if (!this.mergeItemStack(itemstack1, 10, 46, false)) {
				return null;
			}

			if (itemstack1.stackSize == 0) {
				slot.putStack((ItemStack) null);
			} else {
				slot.onSlotChanged();
			}

			if (itemstack1.stackSize == itemstack.stackSize) {
				return null;
			}

			slot.onPickupFromSlot(playerIn, itemstack1);
		}

		return itemstack;
	}

	@Override
	public boolean canMergeSlot(ItemStack stack, Slot slotIn) {
		return slotIn.inventory != this.craftResult && super.canMergeSlot(stack, slotIn);
	}

	@Override
	public void onContainerClosed(EntityPlayer playerIn) {
		super.onContainerClosed(playerIn);

		if (!this.worldObj.isRemote) {
			for (int i = 0; i < 9; ++i) {
				ItemStack itemstack = this.craftMatrix.removeStackFromSlot(i);

				if (itemstack != null) {
					playerIn.dropItem(itemstack, true);
				}
			}
		}
	}

}
